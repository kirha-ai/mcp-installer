name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          # Windows arm64 support is limited
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Configure Git for private repos
      run: git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
      env:
        GOPRIVATE: github.com/kirha-ai/*
    
    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate Wire code
      run: |
        go install github.com/google/wire/cmd/wire@latest
        go generate ./...
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist/${{ matrix.goos }}_${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build \
            -ldflags="-s -w -X github.com/kirha-ai/mcp-installer/cmd/cli.version=${{ steps.version.outputs.VERSION }} -X github.com/kirha-ai/mcp-installer/cmd/cli.commit=${GITHUB_SHA} -X github.com/kirha-ai/mcp-installer/cmd/cli.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o dist/${{ matrix.goos }}_${{ matrix.goarch }}/mcp-installer.exe ./cmd
        else
          go build \
            -ldflags="-s -w -X github.com/kirha-ai/mcp-installer/cmd/cli.version=${{ steps.version.outputs.VERSION }} -X github.com/kirha-ai/mcp-installer/cmd/cli.commit=${GITHUB_SHA} -X github.com/kirha-ai/mcp-installer/cmd/cli.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o dist/${{ matrix.goos }}_${{ matrix.goarch }}/mcp-installer ./cmd
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mcp-installer-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/${{ matrix.goos }}_${{ matrix.goarch }}/

  npm-package:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    
    - name: Prepare NPM package
      run: |
        # Create NPM package structure
        mkdir -p npm-package/binaries
        cp pkg/npm/* npm-package/
        
        # Copy binaries to NPM package
        for dir in artifacts/mcp-installer-*/; do
          platform_arch=$(basename "$dir" | sed 's/mcp-installer-//')
          mkdir -p "npm-package/binaries/$platform_arch"
          cp "$dir"/* "npm-package/binaries/$platform_arch/"
        done
        
        # Update version in package.json
        VERSION=${GITHUB_REF#refs/tags/v}
        cd npm-package
        npm version $VERSION --no-git-tag-version
    
    - name: Publish to NPM
      run: |
        cd npm-package
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  github-release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        for dir in artifacts/mcp-installer-*/; do
          platform_arch=$(basename "$dir" | sed 's/mcp-installer-//')
          if [[ "$platform_arch" == *"windows"* ]]; then
            tar -czf "release-assets/mcp-installer-$platform_arch.tar.gz" -C "$dir" .
          else
            tar -czf "release-assets/mcp-installer-$platform_arch.tar.gz" -C "$dir" .
          fi
        done
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}