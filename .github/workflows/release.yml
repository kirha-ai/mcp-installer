name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            name: linux-amd64
          - goos: linux
            goarch: arm64
            name: linux-arm64
          # macOS
          - goos: darwin
            goarch: amd64
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            name: darwin-arm64
          # Windows
          - goos: windows
            goarch: amd64
            name: windows-amd64
            ext: .exe
          - goos: windows
            goarch: arm64
            name: windows-arm64
            ext: .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install Wire
        run: go install github.com/google/wire/cmd/wire@latest

      - name: Generate Wire code
        run: cd di && wire

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          COMMIT="${{ github.sha }}"
          DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          GO_VERSION="$(go version | awk '{print $3}')"
          
          go build \
            -ldflags "-s -w \
              -X 'go.kirha.ai/kirha-mcp-installer/cmd/cli.version=${VERSION}' \
              -X 'go.kirha.ai/kirha-mcp-installer/cmd/cli.commit=${COMMIT}' \
              -X 'go.kirha.ai/kirha-mcp-installer/cmd/cli.date=${DATE}' \
              -X 'go.kirha.ai/kirha-mcp-installer/cmd/cli.goVersion=${GO_VERSION}'" \
            -o "kirha-mcp-installer-${{ matrix.name }}${{ matrix.ext }}" \
            ./cmd

      - name: Create checksum
        run: |
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "kirha-mcp-installer-${{ matrix.name }}${{ matrix.ext }}" > "kirha-mcp-installer-${{ matrix.name }}${{ matrix.ext }}.sha256"
          else
            shasum -a 256 "kirha-mcp-installer-${{ matrix.name }}${{ matrix.ext }}" > "kirha-mcp-installer-${{ matrix.name }}${{ matrix.ext }}.sha256"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kirha-mcp-installer-${{ matrix.name }}
          path: |
            kirha-mcp-installer-${{ matrix.name }}${{ matrix.ext }}
            kirha-mcp-installer-${{ matrix.name }}${{ matrix.ext }}.sha256
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -name "kirha-mcp-installer-*" -type f -exec cp {} release/ \;
          ls -la release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  npm:
    name: Publish NPM Package
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Remove bundled binaries
        run: |
          rm -rf bin/* || true
          
      - name: Copy JavaScript wrapper to bin
        run: |
          mkdir -p bin
          cp scripts/kirha-mcp-installer.js bin/kirha-mcp-installer.js
          chmod +x bin/kirha-mcp-installer.js
          chmod +x scripts/install.js

      - name: Test package before publishing
        run: |
          echo "Testing package structure before publishing..."
          
          # Test syntax
          node -c bin/kirha-mcp-installer.js
          node -c scripts/install.js
          node -c scripts/binary-utils.js
          
          # Test binary-utils
          node -e "
            const { getBinaryInfo, getBinaryName } = require('./scripts/binary-utils.js');
            const info = getBinaryInfo();
            console.log('Binary info:', info);
            if (!info.name || !info.checksumName) {
              throw new Error('Invalid binary info');
            }
          "
          
          # Test npm pack
          npm pack --dry-run
          
          echo "âœ… Package tests passed"

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}